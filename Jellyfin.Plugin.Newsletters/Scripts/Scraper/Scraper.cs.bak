using System;
using System.Collections.Concurrent;
using System.Threading.Tasks;
// using Jellyfin.Plugin.Webhook.Destinations;
// using Jellyfin.Plugin.Webhook.Helpers;
// using Jellyfin.Plugin.Webhook.Models;
using Jellyfin.Plugin.Newsletters.Configuration;
using MediaBrowser.Controller;
using MediaBrowser.Controller.Entities;
using MediaBrowser.Controller.Library;
using Microsoft.Extensions.Logging;

namespace Jellyfin.Plugin.Newsletters.Scripts.Scraper;

/// <inheritdoc />
public class Scraper
{
    private readonly PluginConfiguration config;
    private readonly ConcurrentDictionary<Guid, ScraperContainer> _itemProcessQueue;

    public Scraper()
    {
        config = Plugin.Instance!.Configuration;
        _itemProcessQueue = new ConcurrentDictionary<Guid, ScraperContainer>();
    }
    

    /// <inheritdoc />
    public async Task ProcessItemsAsync()
    {
        // _logger.LogDebug("ProcessItemsAsync");
        // Attempt to process all items in queue.
        var currentItems = _itemProcessQueue.ToArray();
        foreach (var (key, container) in currentItems)
        {
            var item = _libraryManager.GetItemById(key);
            if (item is null)
            {
                // Remove item from queue.
                _itemProcessQueue.TryRemove(key, out _);
                return;
            }


            // Metadata not refreshed yet and under retry limit.
            if (item.ProviderIds.Keys.Count == 0 && container.RetryCount < MaxRetries)
            {
                container.RetryCount++;
                _itemProcessQueue.AddOrUpdate(key, container, (_, _) => container);
                continue;
            }


            // Send notification to each configured destination.
            var dataObject = DataObjectHelpers
                .GetBaseDataObject(_applicationHost, NotificationType.ItemAdded)
                .AddBaseItemData(item);

            var itemType = item.GetType();
            // await _webhookSender.SendNotification(NotificationType.ItemAdded, dataObject, itemType)
            //     .ConfigureAwait(false);

            // Remove item from queue.
            _itemProcessQueue.TryRemove(key, out _);
        }
    }

    /// <inheritdoc />
    public void AddItem(BaseItem item)
    {
        _itemProcessQueue.TryAdd(item.Id, new QueuedItemContainer(item.Id));
        // _logger.LogDebug("Queued {ItemName} for notification", item.Name);
    }
}